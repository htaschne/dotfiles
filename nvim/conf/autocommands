augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
    autocmd BufWritePost */.vim/** source $MYVIMRC
augroup END

augroup git_commit_message
    autocmd!
    autocmd BufReadPre */COMMIT_EDITMSG setlocal spell spelllang=en_us
                \| setlocal textwidth=0
                \| startinsert!
augroup END

augroup textwidth_per_filetype
    autocmd!
    autocmd FileType vim             setlocal textwidth=150
    autocmd FileType sh              setlocal textwidth=150
    autocmd FileType java            setlocal textwidth=120
    autocmd FileType scss            setlocal textwidth=150 tabstop=2 shiftwidth=2
    autocmd FileType html.handlebars setlocal textwidth=150 tabstop=2 shiftwidth=2
    autocmd FileType ruby            setlocal textwidth=150 tabstop=2 shiftwidth=2
    autocmd FileType cpp             setlocal textwidth=80  tabstop=2 shiftwidth=2
    autocmd FileType dockerfile      setlocal textwidth=80  noexpandtab
    autocmd FileType rust            setlocal textwidth=99
    autocmd FileType python          setlocal tabstop=2 shiftwidth=2
    autocmd FileType zig             setlocal tabstop=2 shiftwidth=2
augroup END

augroup highlight_yank
  autocmd!
  autocmd TextYankPost * silent! lua require'vim.highlight'.on_yank({timeout = 40})
augroup END


" LSP Support
function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes

    if exists('+tagfunc')
        setlocal tagfunc=lsp#tagfunc
    endif

    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nmap <buffer> <leader>g :LspDocumentDiagnostics<CR>
    nmap <buffer> <leader>r <plug>(lsp-rename)
    nmap <buffer> <leader>l <plug>(lsp-code-lens)
    nmap <buffer> <leader>; <plug>(lsp-code-action)
    inoremap <buffer> <expr><c-f> lsp#scroll(+4)
    inoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre * call execute('LspDocumentFormatSync')
endfunction

augroup lsp_install
    autocmd!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" vim: ft=vim
